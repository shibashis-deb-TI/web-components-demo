{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common\";\nimport * as i2 from \"../../components/site/site.component\";\nfunction SiteListComponent_th_3_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"th\");\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const heading_r2 = ctx.$implicit;\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(heading_r2);\n  }\n}\nfunction SiteListComponent_tr_4_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"tr\");\n    i0.ɵɵelement(1, \"app-site\", 1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const row_r3 = ctx.$implicit;\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"data\", row_r3);\n  }\n}\nexport class SiteListComponent {\n  constructor() {\n    this.tableData = [{\n      id: 1,\n      checked: false,\n      siteId: 'Site 1',\n      pod: '12345_67890',\n      lastRead: '05/20/2024',\n      dc: 'CLP',\n      address: 'Address Line 1',\n      city: 'City 1',\n      state: 'State',\n      meterType: 'Meter Type',\n      zip: '12345',\n      cycle: 10,\n      loadProfile: 'Profile',\n      customer: 'Customer Name'\n    }, {\n      id: 2,\n      checked: false,\n      siteId: 'Site 1',\n      pod: '12345_67890',\n      lastRead: '05/20/2024',\n      dc: 'CLP',\n      address: 'Address Line 1',\n      city: 'City 1',\n      state: 'State',\n      meterType: 'Meter Type',\n      zip: '12345',\n      cycle: 10,\n      loadProfile: 'Profile',\n      customer: 'Customer Name'\n    }, {\n      id: 3,\n      checked: false,\n      siteId: 'Site 1',\n      pod: '12345_67890',\n      lastRead: '05/20/2024',\n      dc: 'CLP',\n      address: 'Address Line 1',\n      city: 'City 1',\n      state: 'State',\n      meterType: 'Meter Type',\n      zip: '12345',\n      cycle: 10,\n      loadProfile: 'Profile',\n      customer: 'Customer Name'\n    }];\n    this.headers = Object.keys(this.tableData[0]);\n  }\n  handleCheckedRow(id) {\n    const item = this.tableData.find(data => data.id === id);\n    if (!item) {\n      return;\n    }\n    this.tableData = [...this.tableData, {\n      ...item,\n      checked: true\n    }];\n  }\n  static #_ = this.ɵfac = function SiteListComponent_Factory(t) {\n    return new (t || SiteListComponent)();\n  };\n  static #_2 = this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: SiteListComponent,\n    selectors: [[\"app-site-list\"]],\n    decls: 5,\n    vars: 2,\n    consts: [[4, \"ngFor\", \"ngForOf\"], [3, \"data\"]],\n    template: function SiteListComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"section\")(1, \"table\")(2, \"tr\");\n        i0.ɵɵtemplate(3, SiteListComponent_th_3_Template, 2, 1, \"th\", 0);\n        i0.ɵɵelementEnd();\n        i0.ɵɵtemplate(4, SiteListComponent_tr_4_Template, 2, 1, \"tr\", 0);\n        i0.ɵɵelementEnd()();\n      }\n      if (rf & 2) {\n        i0.ɵɵadvance(3);\n        i0.ɵɵproperty(\"ngForOf\", ctx.headers);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngForOf\", ctx.tableData);\n      }\n    },\n    dependencies: [i1.NgForOf, i2.SiteComponent],\n    styles: [\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n  });\n}","map":{"version":3,"names":["i0","ɵɵelementStart","ɵɵtext","ɵɵelementEnd","ɵɵadvance","ɵɵtextInterpolate","heading_r2","ɵɵelement","ɵɵproperty","row_r3","SiteListComponent","constructor","tableData","id","checked","siteId","pod","lastRead","dc","address","city","state","meterType","zip","cycle","loadProfile","customer","headers","Object","keys","handleCheckedRow","item","find","data","_","_2","selectors","decls","vars","consts","template","SiteListComponent_Template","rf","ctx","ɵɵtemplate","SiteListComponent_th_3_Template","SiteListComponent_tr_4_Template"],"sources":["/home/technoidentity/Desktop/nrg/web-component-demo/mfe-app/src/app/sites/containers/site-list/site-list.component.ts","/home/technoidentity/Desktop/nrg/web-component-demo/mfe-app/src/app/sites/containers/site-list/site-list.component.html"],"sourcesContent":["import { Component } from '@angular/core';\nimport { Site } from '@/model';\n\n@Component({\n  selector: 'app-site-list',\n  templateUrl: './site-list.component.html',\n  styleUrls: ['./site-list.component.scss'],\n})\nexport class SiteListComponent {\n  tableData: ReadonlyArray<Site> = [\n    {\n      id: 1,\n      checked: false,\n      siteId: 'Site 1',\n      pod: '12345_67890',\n      lastRead: '05/20/2024',\n      dc: 'CLP',\n      address: 'Address Line 1',\n      city: 'City 1',\n      state: 'State',\n      meterType: 'Meter Type',\n      zip: '12345',\n      cycle: 10,\n      loadProfile: 'Profile',\n      customer: 'Customer Name',\n    },\n    {\n      id: 2,\n      checked: false,\n      siteId: 'Site 1',\n      pod: '12345_67890',\n      lastRead: '05/20/2024',\n      dc: 'CLP',\n      address: 'Address Line 1',\n      city: 'City 1',\n      state: 'State',\n      meterType: 'Meter Type',\n      zip: '12345',\n      cycle: 10,\n      loadProfile: 'Profile',\n      customer: 'Customer Name',\n    },\n    {\n      id: 3,\n      checked: false,\n      siteId: 'Site 1',\n      pod: '12345_67890',\n      lastRead: '05/20/2024',\n      dc: 'CLP',\n      address: 'Address Line 1',\n      city: 'City 1',\n      state: 'State',\n      meterType: 'Meter Type',\n      zip: '12345',\n      cycle: 10,\n      loadProfile: 'Profile',\n      customer: 'Customer Name',\n    },\n  ];\n  headers = Object.keys(this.tableData[0]);\n\n  handleCheckedRow(id: number) {\n    const item = this.tableData.find((data) => data.id === id);\n\n    if (!item) {\n      return;\n    }\n\n    this.tableData = [...this.tableData, { ...item, checked: true }];\n  }\n}\n","<section>\n  <table>\n    <tr>\n      <th *ngFor=\"let heading of headers\">{{ heading }}</th>\n    </tr>\n\n    <tr *ngFor=\"let row of tableData\">\n      <app-site [data]=\"row\" />\n    </tr>\n  </table>\n</section>\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}